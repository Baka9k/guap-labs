// Программа рисует три сферы с разными параметрами поверхности#include <stdlib.h>#include <GL/freeglut.h>void init(void) {   GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };   GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 };   GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };   GLfloat position[] = { 0.0, 3.0, 2.0, 0.0 };   GLfloat lmodel_ambient[] = { 0.4, 0.4, 0.4, 1.0 };   GLfloat local_view[] = { 0.0 };   glClearColor(5.0, 5.0, 5.0, 0.0);   glEnable(GL_DEPTH_TEST);   glShadeModel(GL_SMOOTH);   glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);   glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);   glLightfv(GL_LIGHT0, GL_POSITION, position);   glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);   glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view);   glEnable(GL_LIGHTING);   glEnable(GL_LIGHT0);}void display(void) {   GLfloat no_mat[] = { 0.0, 0.0, 0.0, 1.0 };   GLfloat mat_ambient[] = { 0.7, 0.7, 0.7, 1.0 };   GLfloat mat_ambient_color[] = { 0.1, 0.8, 0.2, 1.0 };   GLfloat mat_diffuse[] = { 0.1, 0.9, 0.8, 1.0 };   GLfloat mat_diffuse_2[] = { 0.1, 0.2, 0.8, 1.0 };   GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };   GLfloat no_shininess[] = { 0.0 };   GLfloat low_shininess[] = { 5.0 };   GLfloat high_shininess[] = { 100.0 };   GLfloat mat_emission[] = {0.3, 0.2, 0.2, 0.0};   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);   // Только диффузное отражение   glPushMatrix();   glTranslatef (-3.75, 3.0, 0.0);   glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse_2);   glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat);   glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);   glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);   glutSolidSphere(1.0, 16, 16);   glPopMatrix();   // Доминирующее зеркальное отражение   glPushMatrix();   glTranslatef (-1.25, 3.0, 0.0);   glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);   glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);   glMaterialfv(GL_FRONT, GL_SHININESS, low_shininess);   glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);   glutSolidSphere(1.0, 16, 16);   glPopMatrix();   // Диффузное и зеркальное отражение   glPushMatrix();   glTranslatef (1.25, 3.0, 0.0);   glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);   glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);   glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);   glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);   glutSolidSphere(1.0, 16, 16);   glPopMatrix();   glFlush();}void reshape(int w, int h) {   glViewport(0, 0, w, h);   glMatrixMode(GL_PROJECTION);   glLoadIdentity();   glOrtho (-6.0, 6.0, -3.0*((GLfloat)h*2)/(GLfloat)w, 3.0*((GLfloat)h*2)/(GLfloat)w, -10.0, 10.0);   glMatrixMode(GL_MODELVIEW);   glLoadIdentity();}int main(int argc, char** argv) {   glutInit(&argc, argv);   glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);   glutInitWindowSize (600, 600);   glutCreateWindow(argv[0]);   init();   glutReshapeFunc(reshape);   glutDisplayFunc(display);   glutMainLoop();   return 0;}